datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid()) @map("_id")
  username      String?
  email         String
  emailVerified DateTime?  @map("email_verified")
  password      String?
  name          String?
  address       String?
  phoneNum      String?
  bio           String?
  profileImage  String?
  dob           DateTime?
  ctzImg        String?
  balance       Float?
  orgName       String?
  assignedOn    DateTime?
  postedOn      DateTime?
  createdAt     DateTime?  @default(now()) @map("created_at")
  updatedAt     DateTime?
  role          Roles      @default(donor)
  campaign      Campaign[]
  payment       Payment[]
  accounts      Account[]
  sessions      Session[]

  @@unique([email, username, id])
  @@map("users")
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Campaign {
  campaignId      String         @id @default(cuid()) @map("_id")
  title           String
  image           String
  isVerified      Boolean
  description     String
  goalAmount      String
  currentAmount   String?
  collectedAmount String?
  startDate       DateTime?
  endDate         DateTime?
  latitude        String?
  longitude       String?
  address         String?
  createdById     String
  createdBy       User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  status          CampaignStatus @default(pendingApproval)
  payment         Payment[] 

  @@map("campaign")
}

model PaymentMethod {
  methodId    String    @id @default(cuid()) @map("_id")
  methodName  String
  displayName String
  payment     Payment[]

  @@map("paymentMethod")
}

model Payment {
  paymentId       String        @id @default(cuid()) @map("_id")
  paymentDate     DateTime
  paymentStatus   PaymentStatus  @default(pending)
  paymentById     String
  paymentBy       User          @relation(fields: [paymentById], references: [id])
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [methodId])
  campaignId      String
  campaign        Campaign     @relation(fields: [campaignId], references: [campaignId])

  @@map("payment")
}

model Category {
  id          String     @id @default(cuid()) @map("_id")
  name        String
  displayName String
  description String
  campaign    Campaign[]

  @@map("category")
}

enum PaymentStatus {
  pending
  clearing
  failed
  cancelled
  completed

  @@map("paymentStatus")
}

enum CampaignStatus {
  approved
  pendingApproval
  rejected
  completed
  cancelled
  inProgress

  @@map("campaignStatus")
}

enum Roles {
  donor
  charity
  fundraiser
  admin

  @@map("roles")
}
